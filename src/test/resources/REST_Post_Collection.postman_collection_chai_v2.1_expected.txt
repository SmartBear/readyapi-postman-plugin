ready.test("The response has all properties", () => {
  const jsonData = JSON.parse(messageExchange.response.contentAsString);
  /* comment */

  chai.expect(jsonData.type).to.eql('vip');  /* comment */

  chai.expect(jsonData.name).to.be.a('string');  //comment
  chai.expect(jsonData.id).to.have.lengthOf(1);
});

ready.test("Body contains string", () => chai.expect(String(messageExchange.response.contentAsString)).to.include("customer_id"));

ready.test("Successful POST request", () => {
  //comment
  chai.expect(messageExchange.response.getStatusCode()).to.be.oneOf([200, 201]);
});

ready.test("Content-Type header is application/json", () => {
  chai.expect(String(messageExchange.responseHeaders.get('Content-Type'))).to.eql('application/json');
});

ready.test("Response time is less than 200ms", () => {
  chai.expect(messageExchange.response.timeTaken).to.be.below(200);
});

ready.test("Response property matches environment variable", function() {
  chai.expect(JSON.parse(messageExchange.response.contentAsString).name).to.eql(chai.environment.get("name"));
});

const jsonData = JSON.parse(messageExchange.response.contentAsString);

ready.test("Test data type of the response", () => {
  chai.expect(jsonData).to.be.an("object");
  // comment
  chai.expect(jsonData.name).to.be.a("string");
  chai.expect(jsonData.age).to.be.a("number");
  chai.expect(jsonData.hobbies).to.be.an("array");
  chai.expect(jsonData.website).to.be.undefined;
  chai.expect(jsonData.email).to.be.null;
});

ready.test("Test array properties", () => {
  chai.expect(jsonData.errors).to.be.empty;
  chai.expect(jsonData.areas).to.include("goods");
  const notificationSettings = jsonData.settings.find(m => m.type === "notification");
  chai.expect(notificationSettings).to.be.an("object", "Could not find the setting");
  chai.expect(notificationSettings.detail).to.include("sms");
  chai.expect(notificationSettings.detail).to.have.members(["email", "sms"]);
});

ready.test("Test object", () => {
  chai.expect({
  a: 1, 
  b: 2}).to.have.all.keys('a', 'b');
  chai.expect({
  a: 1, 
  b: 2}).to.have.any.keys('a', 'b');
  chai.expect({
  a: 1, 
  b: 2}).to.not.have.any.keys('c', 'd');
  chai.expect({
  a: 1}).to.have.property('a');
  chai.expect({
  a: 1, 
  b: 2}).to.be.a('object').that.has.all.keys('a', 'b');
});

ready.test("Value is in valid list", function() {
  chai.expect(JSON.parse(messageExchange.response.contentAsString).type).to.be.oneOf(["Subscriber", "Customer", "User"]);
});

ready.test("Object is contained", () => {
  const expectedObject = {
  "created": true, 
  "errors": []};
  chai.expect(JSON.parse(messageExchange.response.contentAsString)).to.deep.include(expectedObject);
});

ready.test('Response is valid', function() {
  chai.response.to.have.jsonSchema(schema);
});

// Delimiter checks
const val = 5 / 5;

const tab = [a, b, c];

A = 5;

B = 10;
